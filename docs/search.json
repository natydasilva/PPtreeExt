[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Natalia da Silva. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Silva Nd, Lee E, Cook D (2025). PPtreeExt: Projection Pursuit Classification Tree extensions. R package version 0.1.0.","code":"@Manual{,   title = {PPtreeExt: Projection Pursuit Classification Tree extensions},   author = {Natalia da Silva and Eun-Kyung Lee and Di Cook},   year = {2025},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"pptreeext","dir":"","previous_headings":"","what":"Projection Pursuit Classification Tree extensions","title":"Projection Pursuit Classification Tree extensions","text":"PPtreeExt R package extends PPtree algorithm classification problems. extantions allows handle multiple splits per group complex structures original algorithm.","code":""},{"path":"/reference/LDAopt_MOD.html","id":null,"dir":"Reference","previous_headings":"","what":"PP optimization using LDA index — LDAopt_MOD","title":"PP optimization using LDA index — LDAopt_MOD","text":"PP optimization using LDA index original","code":""},{"path":"/reference/LDAopt_MOD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PP optimization using LDA index — LDAopt_MOD","text":"","code":"LDAopt_MOD(origclass,origdata,q=1,weight=TRUE,...)"},{"path":"/reference/LDAopt_MOD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PP optimization using LDA index — LDAopt_MOD","text":"origclass class information vector data origdata data matrix without class information q dimension projection vector weight weight flag LDA index ... arguments passed methods","code":""},{"path":"/reference/LDAopt_MOD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PP optimization using LDA index — LDAopt_MOD","text":"indexbest maximum LDA index value projbest optimal q-dimensional projection matrix origclass original class information vector origdata  original data matrix  without class information","code":""},{"path":"/reference/LDAopt_MOD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PP optimization using LDA index — LDAopt_MOD","text":"Find q-dimensional optimal projection using LDA projectin pursuit index","code":""},{"path":"/reference/LDAopt_MOD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PP optimization using LDA index — LDAopt_MOD","text":"Lee, EK., Cook, D., Klinke, S., Lumley, T.(2005) Projection Pursuit Exploratory Supervised Classification, Journal Computational Graphical Statistics, 14(4):831-846.","code":""},{"path":"/reference/NCI60.html","id":null,"dir":"Reference","previous_headings":"","what":"NCI60 data set — NCI60","title":"NCI60 data set — NCI60","text":"cDNA microarrays used examine variation gene expression among 60 cell lines.  cell lines derived tumors different sites origin. data set contain 61 observations 30 feature variables 8 different tissue types. Type 8 different tissue types, 9 cases breast, 5 cases central nervous system (CNS), 7 cases pf colon, 8 cases leukemia, 8 cases melanoma, 9 cases  non-small-cell lung carcinoma (NSCLC), 6 cases ovarian 9 cases renal. Gene1 Gen 30 gene expression information","code":""},{"path":"/reference/NCI60.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NCI60 data set — NCI60","text":"","code":"data(NCI60)"},{"path":"/reference/NCI60.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NCI60 data set — NCI60","text":"data frame 61 rows 31 variables","code":""},{"path":"/reference/NCI60.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"NCI60 data set — NCI60","text":"Dudoit, S., Fridlyand, J. Speed, T. P. (2002). Comparison Discrimination Methods Classification Tumors Using Gene Expression Data. Journal American statistical Association 97 77-87.","code":""},{"path":"/reference/PDAopt_MOD.html","id":null,"dir":"Reference","previous_headings":"","what":"PP optimization using PDA index — PDAopt_MOD","title":"PP optimization using PDA index — PDAopt_MOD","text":"PP optimization using PDA index original","code":""},{"path":"/reference/PDAopt_MOD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PP optimization using PDA index — PDAopt_MOD","text":"","code":"PDAopt_MOD(origclass,origdata,q=1,weight=TRUE,lambda=0.1,...)"},{"path":"/reference/PDAopt_MOD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PP optimization using PDA index — PDAopt_MOD","text":"origclass class information vector data origdata data matrix without class information q dimension projection vector weight weight flag PDA index lambda lambda PDA index ... arguments passed methods","code":""},{"path":"/reference/PDAopt_MOD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PP optimization using PDA index — PDAopt_MOD","text":"indexbest maximum PDA index value projbest optimal q-dimensional projection matrix origclass original class information vector origdata  original data matrix without class information","code":""},{"path":"/reference/PDAopt_MOD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PP optimization using PDA index — PDAopt_MOD","text":"Find q-dimensional optimal projection using PDA projectin pursuit index","code":""},{"path":"/reference/PDAopt_MOD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PP optimization using PDA index — PDAopt_MOD","text":"Lee, EK, Cook, D.(2010) Projection Pursuit Index Large p Small n Data, Statistics Computing, 20:381-392.","code":""},{"path":"/reference/PDAopt_MOD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PP optimization using PDA index — PDAopt_MOD","text":"","code":"data(iris) PDA.proj.result <- PDAopt_MOD(iris[,5],iris[,1:4],weight=TRUE,q=2,lambda=0.1) PDA.proj.result$indexbest #> [1] 0.9764024 PDA.proj.result$projbest #>            [,1]         [,2] #> [1,] -0.1440983  0.004607328 #> [2,] -0.3964776  0.624136730 #> [3,]  0.5001605 -0.236603135 #> [4,]  0.7562280  0.744614713"},{"path":"/reference/PPTreeclass_MOD.html","id":null,"dir":"Reference","previous_headings":"","what":"Projection pursuit classification tree — PPTreeclass_MOD","title":"Projection pursuit classification tree — PPTreeclass_MOD","text":"Construct projection pursuit classification tree MOD","code":""},{"path":"/reference/PPTreeclass_MOD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Projection pursuit classification tree — PPTreeclass_MOD","text":"","code":"PPTreeclass_MOD(formula,data, PPmethod=\"LDA\",weight=TRUE,                      r=1,lambda=0.1,energy=0,maxiter=50000,strule = 1,tot,...)"},{"path":"/reference/PPTreeclass_MOD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Projection pursuit classification tree — PPTreeclass_MOD","text":"formula object class \"formula\" data data frame PPmethod method projection pursuit; \"LDA\", \"PDA\" weight weight flag LDA, PDA Lr index r r Lr index lambda lambda PDA index energy parameter probability take new projection maxiter maximum iteration number strule select stoping rule rule based G=1 pure node tot total obs original class ... arguments passed methods","code":""},{"path":"/reference/PPTreeclass_MOD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Projection pursuit classification tree — PPTreeclass_MOD","text":"Tree.Struct tree structure projection pursuit classification tree projbest.node 1 dimensional optimal projections node split splitCutoff.node cutoff values node split origclass original class origdata original data","code":""},{"path":"/reference/PPTreeclass_MOD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Projection pursuit classification tree — PPTreeclass_MOD","text":"Find tree structure using various projection pursuit indices classification split.","code":""},{"path":"/reference/PPTreeclass_MOD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Projection pursuit classification tree — PPTreeclass_MOD","text":"Lee, YD, Cook, D., Park JW, Lee, EK(2013) PPtree: Projection Pursuit Classification Tree, Electronic Journal Statistics, 7:1369-1386.","code":""},{"path":"/reference/PPTreeclass_MOD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Projection pursuit classification tree — PPTreeclass_MOD","text":"","code":"data(iris) Tree.result <- PPTreeclass_MOD(Species~.,data = iris,\"LDA\") Tree.result #> =============================================================  #> Projection Pursuit Classification Tree result  #> ============================================================= #>  #> 1) root #>    2)  proj1*X < cut1 #>       4)* proj2*X < cut2  ->  \"setosa\" #>       5)  proj2*X >= cut2 #>          6)* proj3*X < cut3  ->  \"setosa\" #>          7)  proj3*X >= cut3 #>             8)* proj4*X < cut4  ->  \"setosa\" #>             9)  proj4*X >= cut4 #>                10)* proj5*X < cut5  ->  \"setosa\" #>                11)  proj5*X >= cut5 #>                   12)* proj6*X < cut6  ->  \"setosa\" #>                   13)  proj6*X >= cut6 #>                      14)* proj7*X < cut7  ->  \"setosa\" #>                      15)  proj7*X >= cut7 #>                         16)  proj8*X < cut8 #>                            18)  proj9*X < cut9 #>                               20)* proj10*X < cut10  ->  \"versicolor\" #>                               21)  proj10*X >= cut10 #>                                  22)  proj11*X < cut11 #>                                     24)  proj12*X < cut12 #>                                        26)* proj13*X < cut13  ->  \"versicolor\" #>                                        27)  proj13*X >= cut13 #>                                           28)  proj14*X < cut14 #>                                              30)* proj15*X < cut15  ->  \"versicolor\" #>                                              31)  proj15*X >= cut15 #>                                                 32)  proj16*X < cut16 #>                                                    34)* proj17*X < cut17  ->  \"versicolor\" #>                                                    35)  proj17*X >= cut17 #>                                                       36)  proj18*X < cut18 #>                                                          38)* proj19*X < cut19  ->  \"versicolor\" #>                                                          39)  proj19*X >= cut19 #>                                                             40)* proj20*X < cut20  ->  \"versicolor\" #>                                                             41)  proj20*X >= cut20 #>                                                                42)  proj21*X < cut21 #>                                                                   44)* proj22*X < cut22  ->  \"versicolor\" #>                                                                   45)* proj22*X >= cut22  ->  \"virginica\" #>                                                                43)* proj21*X >= cut21  ->  \"virginica\" #>                                                       37)* proj18*X >= cut18  ->  \"versicolor\" #>                                                 33)* proj16*X >= cut16  ->  \"versicolor\" #>                                           29)* proj14*X >= cut14  ->  \"versicolor\" #>                                     25)* proj12*X >= cut12  ->  \"versicolor\" #>                                  23)* proj11*X >= cut11  ->  \"versicolor\" #>                            19)* proj9*X >= cut9  ->  \"versicolor\" #>                         17)* proj8*X >= cut8  ->  \"versicolor\" #>    3)* proj1*X >= cut1  ->  \"setosa\" #>  #> Error rates of various cutoff values  #> ------------------------------------------------------------- #> [1] NA"},{"path":"/reference/PPclassify_MOD.html","id":null,"dir":"Reference","previous_headings":"","what":"predict PPtree — PPclassify_MOD","title":"predict PPtree — PPclassify_MOD","text":"predict projection pursuit classification tree","code":""},{"path":"/reference/PPclassify_MOD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"predict PPtree — PPclassify_MOD","text":"","code":"PPclassify_MOD(Tree.result,test.data,true.class=NULL,...)"},{"path":"/reference/PPclassify_MOD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"predict PPtree — PPclassify_MOD","text":"Tree.result PPtreeclass object test.data test dataset true.class true class test dataset available ... arguments passed methods","code":""},{"path":"/reference/PPclassify_MOD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"predict PPtree — PPclassify_MOD","text":"predict.class predicted class predict.error number prediction errors","code":""},{"path":"/reference/PPclassify_MOD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"predict PPtree — PPclassify_MOD","text":"Predict class test set fitted projection pursuit classification tree calculate prediction error.","code":""},{"path":"/reference/PPclassify_MOD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"predict PPtree — PPclassify_MOD","text":"Lee, YD, Cook, D., Park JW, Lee, EK(2013) PPtree: Projection Pursuit Classification Tree, Electronic Journal Statistics, 7:1369-1386.","code":""},{"path":"/reference/PPclassify_MOD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"predict PPtree — PPclassify_MOD","text":"","code":"data(iris) n <- nrow(iris) tot <- c(1:n) n.train <- round(n*0.9) train <- sample(tot,n.train) test <- tot[-train] Tree.result <- PPTreeclass_MOD(formula = Species~.,data = iris[train,],PPmethod = \"LDA\") PPclassify_MOD(Tree.result,test.data = iris[test,1:4], true.class = iris[test,5]) #> $predict.error #> [1] 0 #>  #> $predict.class #>  [1] \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"     \"versicolor\" #>  [6] \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\" #> [11] \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\"  #>"},{"path":"/reference/PPtree_splitMOD.html","id":null,"dir":"Reference","previous_headings":"","what":"Projection pursuit classification tree with random variable selection in each split — PPtree_splitMOD","title":"Projection pursuit classification tree with random variable selection in each split — PPtree_splitMOD","text":"Find tree structure using various projection pursuit indices classification split.","code":""},{"path":"/reference/PPtree_splitMOD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Projection pursuit classification tree with random variable selection in each split — PPtree_splitMOD","text":"","code":"PPtree_splitMOD(form, data, PPmethod='LDA',  size.p=1,  lambda=0.1, entro ,entroindiv,...)"},{"path":"/reference/PPtree_splitMOD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Projection pursuit classification tree with random variable selection in each split — PPtree_splitMOD","text":"form character name class variable. data Data frame complete data set. PPmethod index use projection pursuit: 'LDA', 'PDA' size.p proportion variables randomly sampled split, default 1, returns PPtree. lambda penalty parameter PDA index 0 1 . lambda = 0, penalty parameter added PDA index LDA index. lambda = 1 variables treated uncorrelated. default value lambda = 0.1. entro TRUE, compute entropy method entroindiv TRUE, compute entropy obs...clarify ... arguments passed methods","code":""},{"path":"/reference/PPtree_splitMOD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Projection pursuit classification tree with random variable selection in each split — PPtree_splitMOD","text":"object class PPtreeclass components Tree.Struct Tree structure projection pursuit classification tree projbest.node 1-dim optimal projections split node splitCutoff.node cutoff values split node origclass original class origdata original data","code":""},{"path":"/reference/PPtree_splitMOD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Projection pursuit classification tree with random variable selection in each split — PPtree_splitMOD","text":"Lee, YD, Cook, D., Park JW, Lee, EK (2013) PPtree: Projection pursuit classification tree, Electronic Journal Statistics, 7:1369-1386.","code":""},{"path":"/reference/Tree.construct_MOD.html","id":null,"dir":"Reference","previous_headings":"","what":"Projection pursuit classification tree MOD — Tree.construct_MOD","title":"Projection pursuit classification tree MOD — Tree.construct_MOD","text":"Construct projection pursuit classification tree MOD (NEW)","code":""},{"path":"/reference/Tree.construct_MOD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Projection pursuit classification tree MOD — Tree.construct_MOD","text":"","code":"Tree.construct_MOD(origclass,origdata,Tree.Struct, id,rep,rep1,rep2, projbest.node,splitCutoff.node,PPmethod,r = NULL,  lambda=NULL,TOL,maxiter=50000,q=1,weight=TRUE,tol = .5,strule ,tot,...)"},{"path":"/reference/Tree.construct_MOD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Projection pursuit classification tree MOD — Tree.construct_MOD","text":"origclass original class origdata original data Tree.Struct tree structure projection pursuit classification tree id something rep something rep1 something rep2 something projbest.node somenthing splitCutoff.node something PPmethod method projection pursuit; \"LDA\", \"PDA\" r r Lr index lambda something TOL dfasd maxiter something q something weight weight flag LDA, PDA tol something strule select stoping rule rule based G=1 pure node tot total obs original class ... something","code":""},{"path":"/reference/Tree.construct_MOD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Projection pursuit classification tree MOD — Tree.construct_MOD","text":"Find tree structure using various projection pursuit indices classification split.","code":""},{"path":"/reference/Tree.construct_MOD_fedeprueba.html","id":null,"dir":"Reference","previous_headings":"","what":"Projection pursuit classification tree MOD — Tree.construct_MOD_fedeprueba","title":"Projection pursuit classification tree MOD — Tree.construct_MOD_fedeprueba","text":"Construct projection pursuit classification tree MOD (NEW)","code":""},{"path":"/reference/Tree.construct_MOD_fedeprueba.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Projection pursuit classification tree MOD — Tree.construct_MOD_fedeprueba","text":"","code":"Tree.construct_MOD_fedeprueba(origclass,origdata,Tree.Struct, id,rep,rep1,rep2, projbest.node,splitCutoff.node,PPmethod,r = NULL,  lambda=NULL,TOL,maxiter=50000,q=1,weight=TRUE,tol = .5,strule ,tot,...)"},{"path":"/reference/Tree.construct_MOD_fedeprueba.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Projection pursuit classification tree MOD — Tree.construct_MOD_fedeprueba","text":"origclass original class origdata original data Tree.Struct tree structure projection pursuit classification tree id something rep something rep1 something rep2 something projbest.node somenthing splitCutoff.node something PPmethod method projection pursuit; \"LDA\", \"PDA\" r r Lr index lambda something TOL dfasd maxiter something q something weight weight flag LDA, PDA tol something strule select stoping rule rule based G=1 pure node tot total obs original class ... something","code":""},{"path":"/reference/Tree.construct_MOD_fedeprueba.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Projection pursuit classification tree MOD — Tree.construct_MOD_fedeprueba","text":"Find tree structure using various projection pursuit indices classification split.","code":""},{"path":"/reference/crab.html","id":null,"dir":"Reference","previous_headings":"","what":"Astralian crabs — crab","title":"Astralian crabs — crab","text":"Measurements rock crabs genus Leptograpsus. data set contains 200 observations  two species crab (blue orange), 50 specimens sex species,   collected site Fremantle, Western Australia. Type class variable 4 classes combinations specie sex (BlueMale, BlueFemale, OrangeMale OrangeFemale) FL size frontal lobe length, mm RW rear width, mm CL length midline carapace, mm CW maximum width carapace, mm BD depth body; females, measured displacement abdomen, mm","code":""},{"path":"/reference/crab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Astralian crabs — crab","text":"","code":"data(crab)"},{"path":"/reference/crab.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Astralian crabs — crab","text":"data frame 200 rows 6 variables","code":""},{"path":"/reference/crab.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Astralian crabs — crab","text":"Campbell, N. . & Mahon, R. J. (1974), Multivariate Study Variation Two Species Rock Crab genus Leptograpsus, Australian Journal Zoology 22(3), 417 - 425.","code":""},{"path":"/reference/explorapp.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny app to explore PPtree algirith partitions — explorapp","title":"Shiny app to explore PPtree algirith partitions — explorapp","text":"Shiny app explore PPtree algirith partitions","code":""},{"path":"/reference/explorapp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny app to explore PPtree algirith partitions — explorapp","text":"","code":"explorapp(ui, server)"},{"path":"/reference/explorapp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny app to explore PPtree algirith partitions — explorapp","text":"ui server aaa","code":""},{"path":"/reference/explorapp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shiny app to explore PPtree algirith partitions — explorapp","text":"","code":"if(interactive()){ explorapp(ui,server) }"},{"path":"/reference/findproj_MOD.html","id":null,"dir":"Reference","previous_headings":"","what":"1D projection for each node partition using entropy (NEW) — findproj_MOD","title":"1D projection for each node partition using entropy (NEW) — findproj_MOD","text":"1D projection node partition using entropy (NEW)","code":""},{"path":"/reference/findproj_MOD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1D projection for each node partition using entropy (NEW) — findproj_MOD","text":"","code":"findproj_MOD(origclass, origdata, PPmethod=\"LDA\", q=1,weight=TRUE,lambda =.1)"},{"path":"/reference/findproj_MOD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D projection for each node partition using entropy (NEW) — findproj_MOD","text":"origclass original class origdata original data PPmethod method projection pursuit; \"LDA\", \"PDA\" q 1D proj weight weight flag LDA, PDA Lr index lambda lambda PDA index","code":""},{"path":"/reference/findproj_MOD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"1D projection for each node partition using entropy (NEW) — findproj_MOD","text":"Lee, YD, Cook, D., Park JW, Lee, EK(2013) PPtree: Projection Pursuit Classification Tree, Electronic Journal Statistics, 7:1369-1386.","code":""},{"path":"/reference/fishcatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Fish catch data set — fishcatch","title":"Fish catch data set — fishcatch","text":"159 fishes 7 species caught measured. Altogether   7 variables.  fishes caught lake(Laengelmavesi) near Tampere Finland. Type 7 fish classes, 35 cases Bream, 11 cases Parkki, 56 cases Perch 17 cases Pike, 20 cases Roach, 14 cases Smelt 6 cases Whitewish. weight Weight fish (grams) length1 Length nose beginning tail (cm) length2 Length nose notch tail (cm) length3 Length nose end tail (cm) height Maximal height % Length3 width Maximal width % Length3","code":""},{"path":"/reference/fishcatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fish catch data set — fishcatch","text":"","code":"data(fishcatch)"},{"path":"/reference/fishcatch.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fish catch data set — fishcatch","text":"data frame 159 rows 7 variables","code":""},{"path":"/reference/fishcatch.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Fish catch data set — fishcatch","text":"[http://www.amstat.org/publications/jse/jse_data_archive.htm](fishcatch)","code":""},{"path":"/reference/glass.html","id":null,"dir":"Reference","previous_headings":"","what":"Glass data set — glass","title":"Glass data set — glass","text":"Contains measurements 214 observations 6 types glass; defined terms oxide content. Type 6 types glasses X1 refractive index X2 Sodium (unit measurement: weight percent corresponding oxide). X3 Magnesium X4 Aluminum X5 Silicon X6 Potassium X7 Calcium X8 Barium X9 Iron","code":""},{"path":"/reference/glass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glass data set — glass","text":"","code":"data(glass)"},{"path":"/reference/glass.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Glass data set — glass","text":"data frame 214 rows 10 variables","code":""},{"path":"/reference/image.html","id":null,"dir":"Reference","previous_headings":"","what":"The image data set — image","title":"The image data set — image","text":"contains  2310 observations instances 7 outdoor images Type 7 types outdoor images, brickface, cement,  foliage, grass, path, sky, window. X1 column center pixel region X2 row center pixel region. X3 number pixels region = 9. X4 results line extraction algorithm counts many lines length 5 (orientation) low contrast, less equal 5, go region. X5 measure contrast horizontally adjacent pixels region. 6, mean standard deviation given. attribute used vertical edge detector. X6 X5 sd X7 measures contrast vertically adjacent pixels. Used horizontal line detection. X8 sd X7 X9 average region (R + G + B)/3 X10 average region R value. X11 average region B value. X12 average region G value. X13 measure excess red: (2R - (G + B)) X14 measure excess blue: (2B - (G + R)) X15 measure excess green: (2G - (R + B)) X16 3-d nonlinear transformation RGB. (Algorithm can found Foley VanDam, Fundamentals Interactive Computer Graphics) X17 mean X16 X18 hue  mean","code":""},{"path":"/reference/image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The image data set — image","text":"","code":"data(image)"},{"path":"/reference/image.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The image data set — image","text":"data frame contains 2310 observations 19 variables","code":""},{"path":"/reference/leukemia.html","id":null,"dir":"Reference","previous_headings":"","what":"Leukemia data set This dataset comes from a study of gene expression in two types of acute leukemias, acute lymphoblastic leukemia (ALL) and acute myeloid leukemia (AML). Gene expression levels were measured using Affymetrix high density oligonucleotide arrays containing 6817 human genes. A data set containing 72 observations from 3 leukemia types classes.  Type has 3 classes with 38 cases of B-cell ALL, 25 cases of AML and 9 cases of T-cell ALL . Gene1 to Gen 40 gene expression levels  — leukemia","title":"Leukemia data set This dataset comes from a study of gene expression in two types of acute leukemias, acute lymphoblastic leukemia (ALL) and acute myeloid leukemia (AML). Gene expression levels were measured using Affymetrix high density oligonucleotide arrays containing 6817 human genes. A data set containing 72 observations from 3 leukemia types classes.  Type has 3 classes with 38 cases of B-cell ALL, 25 cases of AML and 9 cases of T-cell ALL . Gene1 to Gen 40 gene expression levels  — leukemia","text":"Leukemia data set dataset comes study gene expression two types acute leukemias, acute lymphoblastic leukemia () acute myeloid leukemia (AML). Gene expression levels measured using Affymetrix high density oligonucleotide arrays containing 6817 human genes. data set containing 72 observations 3 leukemia types classes. Type 3 classes 38 cases B-cell , 25 cases AML 9 cases T-cell Gene1 Gen 40 gene expression levels","code":""},{"path":"/reference/leukemia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Leukemia data set This dataset comes from a study of gene expression in two types of acute leukemias, acute lymphoblastic leukemia (ALL) and acute myeloid leukemia (AML). Gene expression levels were measured using Affymetrix high density oligonucleotide arrays containing 6817 human genes. A data set containing 72 observations from 3 leukemia types classes.  Type has 3 classes with 38 cases of B-cell ALL, 25 cases of AML and 9 cases of T-cell ALL . Gene1 to Gen 40 gene expression levels  — leukemia","text":"","code":"data(leukemia)"},{"path":"/reference/leukemia.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Leukemia data set This dataset comes from a study of gene expression in two types of acute leukemias, acute lymphoblastic leukemia (ALL) and acute myeloid leukemia (AML). Gene expression levels were measured using Affymetrix high density oligonucleotide arrays containing 6817 human genes. A data set containing 72 observations from 3 leukemia types classes.  Type has 3 classes with 38 cases of B-cell ALL, 25 cases of AML and 9 cases of T-cell ALL . Gene1 to Gen 40 gene expression levels  — leukemia","text":"data frame 72 rows 41 variables","code":""},{"path":"/reference/leukemia.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Leukemia data set This dataset comes from a study of gene expression in two types of acute leukemias, acute lymphoblastic leukemia (ALL) and acute myeloid leukemia (AML). Gene expression levels were measured using Affymetrix high density oligonucleotide arrays containing 6817 human genes. A data set containing 72 observations from 3 leukemia types classes.  Type has 3 classes with 38 cases of B-cell ALL, 25 cases of AML and 9 cases of T-cell ALL . Gene1 to Gen 40 gene expression levels  — leukemia","text":"Dudoit, S., Fridlyand, J. Speed, T. P. (2002). Comparison Discrimination Methods Classification Tumors Using Gene Expression Data. Journal American statistical Association 97 77-87.","code":""},{"path":"/reference/lymphoma.html","id":null,"dir":"Reference","previous_headings":"","what":"Lymphoma data set — lymphoma","title":"Lymphoma data set — lymphoma","text":"Gene expression three prevalent adult lymphoid malignancies: B-cell chronic lymphocytic leukemia (B-CLL), follicular lymphoma (FL), diffuse large B-cell lym- phoma (DLBCL). Gene expression levels measured using specialized cDNA microarray, Lymphochip, containing genes preferentially expressed lymphoid cells known immunologic oncologic importance. data set contain 80 observations 3 lymphoma types. Type Class variable 3 classes 29 cases B-cell (B-CLL), 42 cases diffuse large B-cell lymphoma (DLBCL) 9 cases follicular lymphoma (FL) Gene1 Gen 50 gene expression","code":""},{"path":"/reference/lymphoma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lymphoma data set — lymphoma","text":"","code":"data(lymphoma)"},{"path":"/reference/lymphoma.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Lymphoma data set — lymphoma","text":"data frame 80 rows 51 variables","code":""},{"path":"/reference/lymphoma.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Lymphoma data set — lymphoma","text":"Dudoit, S., Fridlyand, J. Speed, T. P. (2002). Comparison Discrimination Methods Classification Tumors Using Gene Ex- pression Data. Journal American statistical Association 97 77-87.","code":""},{"path":"/reference/olive.html","id":null,"dir":"Reference","previous_headings":"","what":"The olive data set — olive","title":"The olive data set — olive","text":"contains  572 observations 10 variables Region Three super-classes Italy: North, South island Sardinia area Nine collection areas: three North, four South 2 Sardinia palmitic fatty acids percent x 100 palmitoleic fatty acids percent x 100 stearic fatty acids percent x 100 oleic fatty acids percent x 100 linoleic fatty acids percent x 100 linolenic fatty acids percent x 100 arachidic fatty acids percent x 100 eicosenoic fatty acids percent x 100","code":""},{"path":"/reference/olive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The olive data set — olive","text":"","code":"data(olive)"},{"path":"/reference/olive.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The olive data set — olive","text":"data frame contains 573 observations 10 variables","code":""},{"path":"/reference/parkinson.html","id":null,"dir":"Reference","previous_headings":"","what":"Parkinson data set — parkinson","title":"Parkinson data set — parkinson","text":"data set containing 195 observations 2 parkinson types. Type Class variable 2 classes, 48 cases healthy people 147 cases Parkinson. feature variables biomedical voice measures X1 Average vocal fundamental frequency X2 Maximum vocal fundamental frequency X3 Minimum vocal fundamental frequency X4 MDVP:Jitter(%) measures variation fundamental frequency X5 MDVP:Jitter(Abs) measures variation fundamental frequency X6 MDVP:RAP measures variation fundamental frequency X7 MDVP:PPQ measures variation fundamental frequency X8 Jitter:DDP measures variation fundamental frequency X9 MDVP:Shimmer measures variation amplitude X10 MDVP:Shimmer(dB) measures variation amplitude X11 Shimmer:APQ3 measures variation amplitude X12 Shimmer:APQ5 measures variation amplitude X13 MDVP:APQ measures variation amplitude X14 Shimmer:DDA measures variation amplitude X15 NHR measures ratio noise tonal components voice X16 HNR measures ratio noise tonal components voice X17 RPDE nonlinear dynamical complexity measures X18 D2 nonlinear dynamical complexity measures X19 DFA - Signal fractal scaling exponent X20 spread1 Nonlinear measures fundamental frequency variation X21 spread2 Nonlinear measures fundamental frequency variation X22 PPE Nonlinear measures fundamental frequency variation","code":""},{"path":"/reference/parkinson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parkinson data set — parkinson","text":"","code":"data(parkinson)"},{"path":"/reference/parkinson.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Parkinson data set — parkinson","text":"data frame 195 rows 23 variables","code":""},{"path":"/reference/parkinson.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Parkinson data set — parkinson","text":"[https://archive.ics.uci.edu/ml/datasets/Parkinsons](Parkinson)","code":""},{"path":"/reference/print.PPtreeclassMOD.html","id":null,"dir":"Reference","previous_headings":"","what":"Print PPtreeclassMOD object — print.PPtreeclassMOD","title":"Print PPtreeclassMOD object — print.PPtreeclassMOD","text":"Print PPtreeclassMOD object","code":""},{"path":"/reference/print.PPtreeclassMOD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print PPtreeclassMOD object — print.PPtreeclassMOD","text":"","code":"# S3 method for class 'PPtreeclassMOD' print(x, coef.print = FALSE, cutoff.print = FALSE, verbose = TRUE, ...)"},{"path":"/reference/print.PPtreeclassMOD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print PPtreeclassMOD object — print.PPtreeclassMOD","text":"x something coef.print something cutoff.print something verbose something ... something","code":""},{"path":"/reference/wine.html","id":null,"dir":"Reference","previous_headings":"","what":"Wine data set — wine","title":"Wine data set — wine","text":"data set containing 178 observations 3 wine grown cultivares Italy. Type Class variable 3 classes 3 different wine grown cultivares Italy. X1 X13 Check vbles","code":""},{"path":"/reference/wine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wine data set — wine","text":"","code":"data(wine)"},{"path":"/reference/wine.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wine data set — wine","text":"data frame 178 rows 14 variables","code":""}]
